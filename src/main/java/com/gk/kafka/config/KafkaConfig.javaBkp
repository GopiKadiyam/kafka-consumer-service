package com.gk.kafka.config;

import org.apache.kafka.clients.consumer.ConsumerConfig;
import org.apache.kafka.common.serialization.StringDeserializer;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.data.mongodb.MongoDatabaseFactory;
import org.springframework.data.mongodb.core.MongoTemplate;
import org.springframework.data.mongodb.core.convert.DefaultMongoTypeMapper;
import org.springframework.data.mongodb.core.convert.MappingMongoConverter;
import org.springframework.data.mongodb.core.mapping.MongoMappingContext;
import org.springframework.kafka.config.ConcurrentKafkaListenerContainerFactory;
import org.springframework.kafka.core.ConsumerFactory;
import org.springframework.kafka.core.DefaultKafkaConsumerFactory;
import org.springframework.kafka.listener.ContainerProperties;

import java.util.HashMap;
import java.util.Map;

@Configuration
public class KafkaConfig {

//    @Value("${spring.kafka.bootstrap-servers}")
//    private String bootstrapServer;
//    @Value("${spring.kafka.consumer.group-id}")
//    private String groupId;
//    @Value("${msgs.kafka.topic.name}")
//    private String topicName;
//    @Value("${spring.kafka.consumer.auto-offset-reset}")
//    private String autoOffSetResetConfig;

//    @Value("${spring.kafka.consumer.max-poll-records}")
//    private int maxPollRecords;
//    @Value("${spring.kafka.consumer.fetch-min-bytes}")
//    private int fetchMinBytes;
//    @Value("${spring.kafka.consumer.fetch-max-wait}")
//    private int fetchMaxWait;
//    @Value("${spring.kafka.consumer.heartbeat-interval}")
//    private int heartBeatInterval;
//    @Value("${spring.kafka.listener.concurrency}")
//    private int concurrency;
//    @Value("${spring.kafka.listener.type}")
//    private String listenerType;
//    @Value("${spring.kafka.consumer.ack-mode}")
//    private String ackMode;

//    @Bean
//    public ConsumerFactory<String, String> consumerFactory() {
//        Map<String, Object> props = new HashMap<>();
//        props.put(ConsumerConfig.BOOTSTRAP_SERVERS_CONFIG, bootstrapServer);
//        props.put(ConsumerConfig.GROUP_ID_CONFIG, groupId);
//        props.put(ConsumerConfig.KEY_DESERIALIZER_CLASS_CONFIG, StringDeserializer.class);
//        props.put(ConsumerConfig.VALUE_DESERIALIZER_CLASS_CONFIG, StringDeserializer.class);
//
//        props.put(ConsumerConfig.AUTO_OFFSET_RESET_CONFIG, autoOffSetResetConfig); // Start from earliest available
////        props.put(ConsumerConfig.ENABLE_AUTO_COMMIT_CONFIG, false);
////        props.put(ConsumerConfig.MAX_POLL_RECORDS_CONFIG, maxPollRecords); // Fetch up to 50 messages per poll
////        props.put(ConsumerConfig.FETCH_MIN_BYTES_CONFIG, fetchMinBytes);
////        props.put(ConsumerConfig.FETCH_MAX_WAIT_MS_CONFIG, fetchMaxWait);
////        props.put(ConsumerConfig.HEARTBEAT_INTERVAL_MS_CONFIG, heartBeatInterval);
////        props.put("spring.kafka.listener.concurrency",concurrency);
////        props.put("spring.kafka.listener.type",listenerType);
////        props.put("spring.kafka.consumer.ack-mode",ackMode);
//        // Security settings
//        props.put("security.protocol", "SASL_SSL");
//        props.put("sasl.mechanism", "PLAIN");
//        //TODO take from local imp file
//        props.put("sasl.jaas.config", "org.apache.kafka.common.security.plain.PlainLoginModule required username=\"***\" password=\"**\";");
//
//        return new DefaultKafkaConsumerFactory<>(props);
//    }

//    @Bean
//    public ConcurrentKafkaListenerContainerFactory<String, String> kafkaListenerContainerFactory() {
//        ConcurrentKafkaListenerContainerFactory<String, String> factory =
//                new ConcurrentKafkaListenerContainerFactory<>();
//        factory.setConsumerFactory(consumerFactory());
//        factory.setBatchListener(true);  // Enable batch consumption
//        factory.getContainerProperties().setAckMode(ContainerProperties.AckMode.MANUAL);
//        return factory;
//    }


}



